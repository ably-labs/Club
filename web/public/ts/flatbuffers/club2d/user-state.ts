// automatically generated by the FlatBuffers compiler, do not modify

import {flatbuffers} from 'flatbuffers';

export class UserState {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):UserState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsUserState(bb:flatbuffers.ByteBuffer, obj?:UserState):UserState {
  return (obj || new UserState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsUserState(bb:flatbuffers.ByteBuffer, obj?:UserState):UserState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new UserState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

faceMesh(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb!.__vector(this.bb_pos + offset) + index * 2) : 0;
}

faceMeshLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

faceMeshArray():Uint16Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint16Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

faceMeshColor():string|null
faceMeshColor(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
faceMeshColor(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

faceMeshSize():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

usernameAnchorCoordinates(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint16(this.bb!.__vector(this.bb_pos + offset) + index * 2) : 0;
}

usernameAnchorCoordinatesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

usernameAnchorCoordinatesArray():Uint16Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? new Uint16Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startUserState(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addFaceMesh(builder:flatbuffers.Builder, faceMeshOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, faceMeshOffset, 0);
}

static createFaceMeshVector(builder:flatbuffers.Builder, data:number[]|Uint16Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createFaceMeshVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createFaceMeshVector(builder:flatbuffers.Builder, data:number[]|Uint16Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(2, data.length, 2);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt16(data[i]!);
  }
  return builder.endVector();
}

static startFaceMeshVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(2, numElems, 2);
}

static addFaceMeshColor(builder:flatbuffers.Builder, faceMeshColorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, faceMeshColorOffset, 0);
}

static addFaceMeshSize(builder:flatbuffers.Builder, faceMeshSize:number) {
  builder.addFieldFloat32(2, faceMeshSize, 0.0);
}

static addUsernameAnchorCoordinates(builder:flatbuffers.Builder, usernameAnchorCoordinatesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, usernameAnchorCoordinatesOffset, 0);
}

static createUsernameAnchorCoordinatesVector(builder:flatbuffers.Builder, data:number[]|Uint16Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createUsernameAnchorCoordinatesVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createUsernameAnchorCoordinatesVector(builder:flatbuffers.Builder, data:number[]|Uint16Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(2, data.length, 2);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt16(data[i]!);
  }
  return builder.endVector();
}

static startUsernameAnchorCoordinatesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(2, numElems, 2);
}

static endUserState(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishUserStateBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedUserStateBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createUserState(builder:flatbuffers.Builder, faceMeshOffset:flatbuffers.Offset, faceMeshColorOffset:flatbuffers.Offset, faceMeshSize:number, usernameAnchorCoordinatesOffset:flatbuffers.Offset):flatbuffers.Offset {
  UserState.startUserState(builder);
  UserState.addFaceMesh(builder, faceMeshOffset);
  UserState.addFaceMeshColor(builder, faceMeshColorOffset);
  UserState.addFaceMeshSize(builder, faceMeshSize);
  UserState.addUsernameAnchorCoordinates(builder, usernameAnchorCoordinatesOffset);
  return UserState.endUserState(builder);
}
}
